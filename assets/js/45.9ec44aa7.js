(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{291:function(t,e,a){"use strict";a.r(e);var n=a(17),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-常用命令速查表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令速查表"}},[t._v("#")]),t._v(" Git 常用命令速查表")]),t._v(" "),a("p",[a("strong",[t._v("创建版本库")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone <url>                  #克隆远程版本库\n$ git init                         #初始化本地版本库\n")])])]),a("p",[a("strong",[t._v("修改和提交")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git status                       #查看状态\n$ git diff                         #查看变更内容\n$ git add .                        #跟踪所有改动过的文件\n$ git add <file>                   #跟踪指定的文件\n$ git mv <old><new>                #文件改名\n$ git rm<file>                     #删除文件\n$ git rm --cached<file>            #停止跟踪文件但不删除\n$ git commit -m "commit messages"  #提交所有更新过的文件\n$ git commit --amend               #修改最后一次改动\n')])])]),a("p",[a("strong",[t._v("查看提交历史")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log                    #查看提交历史\n$ git log -p <file>          #查看指定文件的提交历史\n$ git blame <file>           #以列表方式查看指定文件的提交历史\n")])])]),a("p",[a("strong",[t._v("撤销")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git reset --hard HEAD      #撤销工作目录中所有未提交文件的修改内容\n$ git checkout HEAD <file>   #撤销指定的未提交文件的修改内容\n$ git revert <commit>        #撤销指定的提交\n$ git log --before="1 days"  #退回到之前1天的版本\n')])])]),a("p",[a("strong",[t._v("分支与标签")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch                   #显示所有本地分支\n$ git checkout <branch/tag>    #切换到指定分支和标签\n$ git branch <new-branch>      #创建新分支\n$ git checkout -b 分支名        #新建分支并切换到新分支\n$ git push origin newbranch    #将新的分支推送到github \n$ git branch -d <branch>       #删除本地分支\n$ git push <remote\\> :<branch/tag-name\\>  #删除远程分支或标签\n$ git tag                      #列出所有本地标签\n$ git tag <tagname>            #基于最新提交创建标签\n$ git tag -d <tagname>         #删除标签\n")])])]),a("p",[a("strong",[t._v("合并与衍合")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git merge <branch>        #合并指定分支到当前分支\n$ git rebase <branch>       #衍合指定分支到当前分支\n")])])]),a("p",[a("strong",[t._v("远程操作")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git remote -v                   #查看远程版本库信息\n$ git remote rm origin            # 删除当前远程地址\n$ git remote show <remote>        #查看指定远程版本库信息\n$ git remote add <remote> <url>   #添加远程版本库\n$ git fetch <remote>              #从远程库获取代码\n$ git pull <remote> <branch>      #下载代码及快速合并gitgit \n$ git branch --set-upstream-to=origin/dev dev      \n$ git push <remote> <branch>      #上传代码及快速合并\n$ git push <remote\\> :<branch/tag-name\\>  #删除远程分支或标签\n$ git push --tags                       #上传所有标签\n$ git push origin master 实际上是 git push origin master:master(远程的master) \n$ git fetch origin 远程分支:本地分支\n")])])]),a("p",[t._v("更多内容请查看 "),a("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 文档"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);e.default=r.exports}}]);